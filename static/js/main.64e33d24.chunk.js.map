{"version":3,"sources":["components/CoinContainer.js","helpers/choice.js","App.js","serviceWorker.js","index.js"],"names":["CoinContainer","props","state","currCoin","nFlips","nHeads","nTails","handleClick","bind","arr","newCoin","this","coins","Math","floor","random","length","setState","st","side","e","flipCoin","className","src","imgSrc","alt","onClick","Component","defaultProps","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mTAIaA,EAAb,kDAOE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,KACVC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,GAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARF,EAPrB,uDAkBI,ICtBmBC,EDsBbC,GCtBaD,EDsBIE,KAAKV,MAAMW,OCrBlBC,KAAKC,MAAMD,KAAKE,SAAWN,EAAIO,SDsB/CL,KAAKM,UAAS,SAACC,GACb,MAAO,CACLf,SAAUO,EACVN,OAAQc,EAAGd,OAAS,EACpBC,OAAyB,UAAjBK,EAAQS,KAAmBD,EAAGb,OAAS,EAAIa,EAAGb,OACtDC,OAAyB,UAAjBI,EAAQS,KAAmBD,EAAGZ,OAAS,EAAIY,EAAGZ,aAxB9D,kCA4Bcc,GACVT,KAAKU,aA7BT,+BAgCI,OACE,yBAAKC,UAAU,iBACb,kDACCX,KAAKT,MAAMC,SACV,yBACEoB,IAAKZ,KAAKT,MAAMC,SAASqB,OACzBC,IAAKd,KAAKT,MAAMC,SAASgB,OAEzB,KACJ,4BAAQO,QAASf,KAAKJ,aAAtB,aACA,qCACUI,KAAKT,MAAME,OADrB,2BACqDO,KAAKT,MAAMG,OAAQ,IADxE,aAEaM,KAAKT,MAAMI,OAFxB,gBA1CR,GAAmCqB,aAAtB3B,EACJ4B,aAAe,CACpBhB,MAAO,CACL,CAAEO,KAAM,QAASK,OAAQ,4CACzB,CAAEL,KAAM,QAASK,OAAQ,8CA+ChBxB,QE3CA6B,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCKAQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3C,QACfqC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,aAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,aAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.64e33d24.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { choice } from \"../helpers/choice\";\nimport \"./CoinContainer.css\";\n\nexport class CoinContainer extends Component {\n  static defaultProps = {\n    coins: [\n      { side: \"heads\", imgSrc: \"https://tinyurl.com/react-coin-heads-jpg\" },\n      { side: \"tails\", imgSrc: \"https://tinyurl.com/react-coin-tails-jpg\" },\n    ],\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      currCoin: null,\n      nFlips: 0,\n      nHeads: 0,\n      nTails: 0,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  flipCoin() {\n    const newCoin = choice(this.props.coins);\n    this.setState((st) => {\n      return {\n        currCoin: newCoin,\n        nFlips: st.nFlips + 1,\n        nHeads: newCoin.side === \"heads\" ? st.nHeads + 1 : st.nHeads,\n        nTails: newCoin.side === \"tails\" ? st.nTails + 1 : st.nTails,\n      };\n    });\n  }\n  handleClick(e) {\n    this.flipCoin();\n  }\n  render() {\n    return (\n      <div className=\"CoinContainer\">\n        <h2>Let's Flip A Coin!</h2>\n        {this.state.currCoin ? (\n          <img\n            src={this.state.currCoin.imgSrc}\n            alt={this.state.currCoin.side}\n          />\n        ) : null}\n        <button onClick={this.handleClick}>Flip Coin</button>\n        <p>\n          Out of {this.state.nFlips} flips, there have been {this.state.nHeads}{\" \"}\n          heads and {this.state.nTails} tails.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default CoinContainer;\n","export function choice(arr) {\n  let randomIndex = Math.floor(Math.random() * arr.length);\n  return arr[randomIndex];\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport CoinContainer from \"./components/CoinContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoinContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}